name: context8-mcp

services:
  # Traefik Reverse Proxy with Let's Encrypt
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      # Enable API and dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=mcp-network"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Let's Encrypt configuration
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@context8.markets}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      # Logs
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/letsencrypt
    networks:
      - mcp-network
    restart: unless-stopped
    labels:
      # Traefik dashboard
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.context8.markets`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      # Traefik dashboard auth (set TRAEFIK_BASIC_AUTH in .env)
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"

  redis:
    image: redis:7-alpine
    container_name: context8-redis
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - mcp-network

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: context8-producer
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "${NT_METRICS_PORT:-9101}:9101"  # Prometheus metrics for analytics
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis:6379
      STREAM_KEY: ${STREAM_KEY:-nt:binance}
      # Embedded Analytics Configuration (Feature 002-nt-embedded-analytics)
      NT_ENABLE_KV_REPORTS: ${NT_ENABLE_KV_REPORTS:-true}
      NT_ENABLE_STREAMS: ${NT_ENABLE_STREAMS:-true}
      NT_REPORT_PERIOD_MS: ${NT_REPORT_PERIOD_MS:-250}
      NT_SLOW_PERIOD_MS: ${NT_SLOW_PERIOD_MS:-2000}
      NT_LEASE_TTL_MS: ${NT_LEASE_TTL_MS:-2000}
      NT_NODE_ID: ${NT_NODE_ID:-nt-producer-001}
      NT_HRW_STICKY_PCT: ${NT_HRW_STICKY_PCT:-0.02}
      NT_MIN_HOLD_MS: ${NT_MIN_HOLD_MS:-2000}
      NT_METRICS_PORT: ${NT_METRICS_PORT:-9101}
    healthcheck:
      test: ["CMD", "python", "-c", "print('ok')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - mcp-network

  # MCP Server (stdio transport - for local use with Claude Desktop)
  # This service is not meant to run as a daemon in Docker.
  # To use: `docker compose run --rm mcp`
  mcp:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: context8-mcp
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - tools  # Only start when explicitly requested
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis:6379
    networks:
      - mcp-network
    stdin_open: true
    tty: true

  # REST API Server (for ChatGPT Custom Actions)
  mcp-sse:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile.rest
    container_name: context8-rest-api
    depends_on:
      redis:
        condition: service_healthy
      traefik:
        condition: service_started
    restart: unless-stopped
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis:6379
      PORT: 8080
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      # HTTP Router
      - "traefik.http.routers.mcp-sse.rule=Host(`api.context8.markets`)"
      - "traefik.http.routers.mcp-sse.entrypoints=websecure"
      - "traefik.http.routers.mcp-sse.tls.certresolver=letsencrypt"
      # Service
      - "traefik.http.services.mcp-sse.loadbalancer.server.port=8080"
      # CORS middleware
      - "traefik.http.routers.mcp-sse.middlewares=mcp-sse-cors"
      - "traefik.http.middlewares.mcp-sse-cors.headers.accesscontrolallowmethods=GET,POST,OPTIONS"
      - "traefik.http.middlewares.mcp-sse-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.mcp-sse-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.mcp-sse-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.mcp-sse-cors.headers.addvaryheader=true"

  #prometheus:
  #  image: prom/prometheus:latest
  #  container_name: context8-prometheus
  #  ports:
  #    - "${PROMETHEUS_PORT:-9090}:9090"
  #  volumes:
  #    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #  command:
  #    - '--config.file=/etc/prometheus/prometheus.yml'
  #    - '--storage.tsdb.path=/prometheus'
  #    - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #    - '--web.console.templates=/usr/share/prometheus/consoles'
  #  healthcheck:
  #    test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
  #    interval: 10s
  #    timeout: 5s
  #    retries: 3
  #  networks:
  #    - context8-network

volumes:
  # Let's Encrypt certificates storage
  traefik-certs:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.88.0.0/16
          gateway: 172.88.0.1
